version: 1.3
type: update
build: 201807232048
id: letsencrypt-ssl-addon
name: Let's Encrypt Free SSL

categories:
- apps/dev-and-admin-tools

targetNodes:
  nodeType:
    - tomcat6
    - tomcat7
    - tomcat8
    - tomcat85
    - tomcat9
    - tomcat
    - tomee
    - tomee-dockerized
    - glassfish3
    - glassfish4
    - glassfish
    - jetty
    - jetty6
    - apache
    - apache2
    - nginxphp
    - apache2-ruby
    - nginx-ruby
    - nginx
    - nginx-dockerized
    - nginxphp-dockerized
    - haproxy
    - apache-lb
    - varnish
    - varnish-dockerized
    - payara
    - wildfly
    - nodejs
    - apache-ruby
    - apache-python
    - nginxruby
    - litespeedphp
    - litespeedadc
    - lemp
    - llsmp
    - jenkins
    - jenkins2

homepage: https://github.com/jelastic-jps/lets-encrypt
baseUrl: https://raw.githubusercontent.com/jelastic-jps/lets-encrypt/stage
logo: images/letsencrypt.png

description:
  text: /text/description.md
  short: Free tool to configure support of secured SSL connection for an environment,
    by either internal or custom domain name.

globals:
  scriptSufix: letsencrypt-ssl
  
mixins:
  - configs/vers.yaml

settings:
  fields:
    - type: string
      name: customDomains
      vtype: domainlist
      caption: External Domain(s)
      placeholder: leave blank to get a test certificate for this environment domain
      required: false
      tooltip: |
        Each of the specified external domains should be preliminarily bound via DNS record to the external IP of the node where add-on is installed (either directly via <a href="https://docs.jelastic.com/custom-domains/#how-to-configure-dns-record" target="_blank">A Record</a> or through CDN / external balancer proxy).<br><br>
        <b>Note:</b> Leave this field blank for issuing a test SSL certificate bound to the internal environment domain.

onBeforeRedeployContainer [${targetNodes.nodeGroup}]:
  callScript:
    action: backup-scripts

onAfterRedeployContainer [${targetNodes.nodeGroup}]:
  callScript:
    action: restore-scripts

onAfterStart:
  callScript:
    action: check-for-update

buttons:
  - confirmText: Do you want to update attached SSL certificate(s)?
    loadingText: Updating...
    action: update
    caption: Update Now
    successText: /text/success.md
  - caption: Configure
    settings: main
    action: configure

onInstall:
  - setGlobals:
      nodeId: ${settings.nodeId:}
      nodeGroup: ${targetNodes.nodeGroup:}
      withExtIp: ${settings.withExtIp:true}
      webroot: ${settings.webroot:}
      webrootPath: ${settings.webrootPath:}
      fallbackToX1: ${settings.fallbackToX1:}
      deployHook: ${settings.deployHook:}
      deployHookType: ${settings.deployHookType:}
      undeployHook: ${settings.undeployHook:}
      undeployHookType: ${settings.undeployHookType:}
      test: ${settings.test:}
  - installScript

onUninstall:
  - callScript:
      action: uninstall
  - delete

onBeforeDelete: delete

onAfterClone:
  install: ${baseUrl}/manifest.jps?_r=${fn.random}
  envName: ${event.response.env.envName}
  nodeGroup: ${globals.nodeGroup}
  settings:
    customDomains: ''
    nodeGroup: ${globals.nodeGroup}
    deployHookType: ${globals.deployHookType}
    undeployHookType: ${globals.undeployHookType}
    withExtIp: ${globals.withExtIp}
    webroot: ${globals.webroot}
    webrootPath: ${globals.webrootPath}
    fallbackToX1: ${globals.fallbackToX1}
    test: ${globals.test}

onAfterConfirmTransfer: installScript

actions:
  installScript:
    script: /scripts/create-installation-script.js?_r=${fn.random}
    params:
      scriptName: ${env.envName}-${targetNodes.nodeGroup}-${globals.scriptSufix}
      baseUrl: ${baseUrl}
      cronTime: 0 ${fn.random(1,6)},${fn.random(10,14)},${fn.random(15,20)} * * *
      customDomains: ${settings.customDomains}
      nodeId: ${globals.nodeId}
      nodeGroup: ${globals.nodeGroup}
      deployHook: ${globals.deployHook}
      deployHookType: ${globals.deployHookType}
      undeployHook: ${globals.undeployHook}
      undeployHookType: ${globals.undeployHookType}
      withExtIp: ${globals.withExtIp}
      webroot: ${globals.webroot}
      webrootPath: ${globals.webrootPath}
      fallbackToX1: ${globals.fallbackToX1}
      test: ${globals.test}
      clientVersion: ${globals.version_acme-sh:}
  callScript:
    script: |
      var j = jelastic, resp = j.dev.scripting.Eval(appid, session, '${env.envName}-${targetNodes.nodeGroup}-${globals.scriptSufix}', {action:'${this.action}'});
      if (resp.result == 0 && typeof resp.response === 'object' && resp.response.result != 0) resp = resp.response;
      return resp;
  update:
    - callScript:
        action: auto-update
  configure: installScript
  delete:
    script: |
      jelastic.dev.scripting.DeleteScript('${env.envName}-${targetNodes.nodeGroup}-${globals.scriptSufix}');
      return {result:0}

success: /text/success.md
